/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type AssetBondDataStruct = {
  state: BigNumberish;
  borrower: string;
  signer: string;
  collateralServiceProvider: string;
  principal: BigNumberish;
  debtCeiling: BigNumberish;
  couponRate: BigNumberish;
  interestRate: BigNumberish;
  delinquencyRate: BigNumberish;
  loanStartTimestamp: BigNumberish;
  collateralizeTimestamp: BigNumberish;
  maturityTimestamp: BigNumberish;
  liquidationTimestamp: BigNumberish;
  ipfsHash: string;
  signerOpinionHash: string;
};

export type AssetBondDataStructOutput = [
  number,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string
] & {
  state: number;
  borrower: string;
  signer: string;
  collateralServiceProvider: string;
  principal: BigNumber;
  debtCeiling: BigNumber;
  couponRate: BigNumber;
  interestRate: BigNumber;
  delinquencyRate: BigNumber;
  loanStartTimestamp: BigNumber;
  collateralizeTimestamp: BigNumber;
  maturityTimestamp: BigNumber;
  liquidationTimestamp: BigNumber;
  ipfsHash: string;
  signerOpinionHash: string;
};

export interface ValidationInterface extends utils.Interface {
  functions: {
    "validateSettleAssetBond((uint8,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,string,string))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "validateSettleAssetBond",
    values: [AssetBondDataStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "validateSettleAssetBond",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Validation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ValidationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    validateSettleAssetBond(
      assetBond: AssetBondDataStruct,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  validateSettleAssetBond(
    assetBond: AssetBondDataStruct,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    validateSettleAssetBond(
      assetBond: AssetBondDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    validateSettleAssetBond(
      assetBond: AssetBondDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    validateSettleAssetBond(
      assetBond: AssetBondDataStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
