/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IndexTestInterface extends ethers.utils.Interface {
  functions: {
    "getLTokenInterestIndex(address)": FunctionFragment;
    "getReserveData(address)": FunctionFragment;
    "updateState(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getLTokenInterestIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveData",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "updateState", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "getLTokenInterestIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateState",
    data: BytesLike
  ): Result;

  events: {};
}

export class IndexTest extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IndexTestInterface;

  functions: {
    getLTokenInterestIndex(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getLTokenInterestIndex(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReserveData(
      asset: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          string,
          number,
          boolean,
          boolean
        ] & {
          moneyPoolFactor: BigNumber;
          lTokenInterestIndex: BigNumber;
          borrowAPY: BigNumber;
          depositAPY: BigNumber;
          lastUpdateTimestamp: BigNumber;
          lTokenAddress: string;
          dTokenAddress: string;
          interestModelAddress: string;
          tokenizerAddress: string;
          id: number;
          isPaused: boolean;
          isActivated: boolean;
        }
      ]
    >;

    "getReserveData(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          string,
          number,
          boolean,
          boolean
        ] & {
          moneyPoolFactor: BigNumber;
          lTokenInterestIndex: BigNumber;
          borrowAPY: BigNumber;
          depositAPY: BigNumber;
          lastUpdateTimestamp: BigNumber;
          lTokenAddress: string;
          dTokenAddress: string;
          interestModelAddress: string;
          tokenizerAddress: string;
          id: number;
          isPaused: boolean;
          isActivated: boolean;
        }
      ]
    >;

    updateState(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateState(address)"(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getLTokenInterestIndex(
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getLTokenInterestIndex(address)"(
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReserveData(
    asset: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      string,
      number,
      boolean,
      boolean
    ] & {
      moneyPoolFactor: BigNumber;
      lTokenInterestIndex: BigNumber;
      borrowAPY: BigNumber;
      depositAPY: BigNumber;
      lastUpdateTimestamp: BigNumber;
      lTokenAddress: string;
      dTokenAddress: string;
      interestModelAddress: string;
      tokenizerAddress: string;
      id: number;
      isPaused: boolean;
      isActivated: boolean;
    }
  >;

  "getReserveData(address)"(
    asset: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      string,
      number,
      boolean,
      boolean
    ] & {
      moneyPoolFactor: BigNumber;
      lTokenInterestIndex: BigNumber;
      borrowAPY: BigNumber;
      depositAPY: BigNumber;
      lastUpdateTimestamp: BigNumber;
      lTokenAddress: string;
      dTokenAddress: string;
      interestModelAddress: string;
      tokenizerAddress: string;
      id: number;
      isPaused: boolean;
      isActivated: boolean;
    }
  >;

  updateState(
    asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateState(address)"(
    asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getLTokenInterestIndex(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLTokenInterestIndex(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveData(
      asset: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string,
        number,
        boolean,
        boolean
      ] & {
        moneyPoolFactor: BigNumber;
        lTokenInterestIndex: BigNumber;
        borrowAPY: BigNumber;
        depositAPY: BigNumber;
        lastUpdateTimestamp: BigNumber;
        lTokenAddress: string;
        dTokenAddress: string;
        interestModelAddress: string;
        tokenizerAddress: string;
        id: number;
        isPaused: boolean;
        isActivated: boolean;
      }
    >;

    "getReserveData(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string,
        number,
        boolean,
        boolean
      ] & {
        moneyPoolFactor: BigNumber;
        lTokenInterestIndex: BigNumber;
        borrowAPY: BigNumber;
        depositAPY: BigNumber;
        lastUpdateTimestamp: BigNumber;
        lTokenAddress: string;
        dTokenAddress: string;
        interestModelAddress: string;
        tokenizerAddress: string;
        id: number;
        isPaused: boolean;
        isActivated: boolean;
      }
    >;

    updateState(asset: string, overrides?: CallOverrides): Promise<void>;

    "updateState(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getLTokenInterestIndex(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLTokenInterestIndex(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveData(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getReserveData(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateState(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateState(address)"(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getLTokenInterestIndex(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLTokenInterestIndex(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveData(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReserveData(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateState(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateState(address)"(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
