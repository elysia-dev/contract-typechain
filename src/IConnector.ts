/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IConnectorInterface extends utils.Interface {
  functions: {
    "isCollateralServiceProvider(address)": FunctionFragment;
    "isCouncil(address)": FunctionFragment;
    "isMoneyPoolAdmin(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "isCollateralServiceProvider",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isCouncil", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isMoneyPoolAdmin",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "isCollateralServiceProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isCouncil", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isMoneyPoolAdmin",
    data: BytesLike
  ): Result;

  events: {
    "CollateralServiceProviderRevoked(address)": EventFragment;
    "CouncilRevoked(address)": EventFragment;
    "NewCollateralServiceProviderAdded(address)": EventFragment;
    "NewCouncilAdded(address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "CollateralServiceProviderRevoked"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CouncilRevoked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewCollateralServiceProviderAdded"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCouncilAdded"): EventFragment;
}

export type CollateralServiceProviderRevokedEvent = TypedEvent<
  [string],
  { account: string }
>;

export type CollateralServiceProviderRevokedEventFilter =
  TypedEventFilter<CollateralServiceProviderRevokedEvent>;

export type CouncilRevokedEvent = TypedEvent<[string], { account: string }>;

export type CouncilRevokedEventFilter = TypedEventFilter<CouncilRevokedEvent>;

export type NewCollateralServiceProviderAddedEvent = TypedEvent<
  [string],
  { account: string }
>;

export type NewCollateralServiceProviderAddedEventFilter =
  TypedEventFilter<NewCollateralServiceProviderAddedEvent>;

export type NewCouncilAddedEvent = TypedEvent<[string], { account: string }>;

export type NewCouncilAddedEventFilter = TypedEventFilter<NewCouncilAddedEvent>;

export interface IConnector extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IConnectorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isCollateralServiceProvider(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isCouncil(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    isMoneyPoolAdmin(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  isCollateralServiceProvider(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isCouncil(account: string, overrides?: CallOverrides): Promise<boolean>;

  isMoneyPoolAdmin(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    isCollateralServiceProvider(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isCouncil(account: string, overrides?: CallOverrides): Promise<boolean>;

    isMoneyPoolAdmin(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "CollateralServiceProviderRevoked(address)"(
      account?: string | null
    ): CollateralServiceProviderRevokedEventFilter;
    CollateralServiceProviderRevoked(
      account?: string | null
    ): CollateralServiceProviderRevokedEventFilter;

    "CouncilRevoked(address)"(
      account?: string | null
    ): CouncilRevokedEventFilter;
    CouncilRevoked(account?: string | null): CouncilRevokedEventFilter;

    "NewCollateralServiceProviderAdded(address)"(
      account?: string | null
    ): NewCollateralServiceProviderAddedEventFilter;
    NewCollateralServiceProviderAdded(
      account?: string | null
    ): NewCollateralServiceProviderAddedEventFilter;

    "NewCouncilAdded(address)"(
      account?: string | null
    ): NewCouncilAddedEventFilter;
    NewCouncilAdded(account?: string | null): NewCouncilAddedEventFilter;
  };

  estimateGas: {
    isCollateralServiceProvider(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCouncil(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    isMoneyPoolAdmin(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isCollateralServiceProvider(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCouncil(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMoneyPoolAdmin(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
