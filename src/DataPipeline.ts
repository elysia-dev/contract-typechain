/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type AssetBondStateDataLocalVarsStruct = {
  assetBondState: BigNumberish;
  tokenOwner: string;
  debtOnMoneyPool: BigNumberish;
  feeOnCollateralServiceProvider: BigNumberish;
};

export type AssetBondStateDataLocalVarsStructOutput = [
  number,
  string,
  BigNumber,
  BigNumber
] & {
  assetBondState: number;
  tokenOwner: string;
  debtOnMoneyPool: BigNumber;
  feeOnCollateralServiceProvider: BigNumber;
};

export type ReserveDataLocalVarsStruct = {
  totalLTokenSupply: BigNumberish;
  implicitLTokenSupply: BigNumberish;
  lTokenInterestIndex: BigNumberish;
  principalDTokenSupply: BigNumberish;
  totalDTokenSupply: BigNumberish;
  averageRealAssetBorrowRate: BigNumberish;
  dTokenLastUpdateTimestamp: BigNumberish;
  borrowAPY: BigNumberish;
  depositAPY: BigNumberish;
  moneyPooLastUpdateTimestamp: BigNumberish;
};

export type ReserveDataLocalVarsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  totalLTokenSupply: BigNumber;
  implicitLTokenSupply: BigNumber;
  lTokenInterestIndex: BigNumber;
  principalDTokenSupply: BigNumber;
  totalDTokenSupply: BigNumber;
  averageRealAssetBorrowRate: BigNumber;
  dTokenLastUpdateTimestamp: BigNumber;
  borrowAPY: BigNumber;
  depositAPY: BigNumber;
  moneyPooLastUpdateTimestamp: BigNumber;
};

export type UserDataLocalVarsStruct = {
  underlyingAssetBalance: BigNumberish;
  lTokenBalance: BigNumberish;
  implicitLtokenBalance: BigNumberish;
  dTokenBalance: BigNumberish;
  principalDTokenBalance: BigNumberish;
  averageRealAssetBorrowRate: BigNumberish;
  lastUpdateTimestamp: BigNumberish;
};

export type UserDataLocalVarsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  underlyingAssetBalance: BigNumber;
  lTokenBalance: BigNumber;
  implicitLtokenBalance: BigNumber;
  dTokenBalance: BigNumber;
  principalDTokenBalance: BigNumber;
  averageRealAssetBorrowRate: BigNumber;
  lastUpdateTimestamp: BigNumber;
};

export interface DataPipelineInterface extends utils.Interface {
  functions: {
    "getAssetBondStateData(address,uint256)": FunctionFragment;
    "getReserveData(address)": FunctionFragment;
    "getUserData(address,address)": FunctionFragment;
    "moneyPool()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAssetBondStateData",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserData",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "moneyPool", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "getAssetBondStateData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "moneyPool", data: BytesLike): Result;

  events: {};
}

export interface DataPipeline extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DataPipelineInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAssetBondStateData(
      asset: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[AssetBondStateDataLocalVarsStructOutput]>;

    getReserveData(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[ReserveDataLocalVarsStructOutput]>;

    getUserData(
      asset: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<[UserDataLocalVarsStructOutput]>;

    moneyPool(overrides?: CallOverrides): Promise<[string]>;
  };

  getAssetBondStateData(
    asset: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<AssetBondStateDataLocalVarsStructOutput>;

  getReserveData(
    asset: string,
    overrides?: CallOverrides
  ): Promise<ReserveDataLocalVarsStructOutput>;

  getUserData(
    asset: string,
    user: string,
    overrides?: CallOverrides
  ): Promise<UserDataLocalVarsStructOutput>;

  moneyPool(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getAssetBondStateData(
      asset: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<AssetBondStateDataLocalVarsStructOutput>;

    getReserveData(
      asset: string,
      overrides?: CallOverrides
    ): Promise<ReserveDataLocalVarsStructOutput>;

    getUserData(
      asset: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<UserDataLocalVarsStructOutput>;

    moneyPool(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getAssetBondStateData(
      asset: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveData(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserData(
      asset: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    moneyPool(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getAssetBondStateData(
      asset: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveData(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserData(
      asset: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    moneyPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
