/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ConnectorInterface extends utils.Interface {
  functions: {
    "addCollateralServiceProvider(address)": FunctionFragment;
    "addCouncil(address)": FunctionFragment;
    "isCollateralServiceProvider(address)": FunctionFragment;
    "isCouncil(address)": FunctionFragment;
    "isMoneyPoolAdmin(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revokeCollateralServiceProvider(address)": FunctionFragment;
    "revokeCouncil(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addCollateralServiceProvider",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "addCouncil", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isCollateralServiceProvider",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isCouncil", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isMoneyPoolAdmin",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeCollateralServiceProvider",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeCouncil",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addCollateralServiceProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addCouncil", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCollateralServiceProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isCouncil", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isMoneyPoolAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeCollateralServiceProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeCouncil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "CollateralServiceProviderRevoked(address)": EventFragment;
    "CouncilRevoked(address)": EventFragment;
    "NewCollateralServiceProviderAdded(address)": EventFragment;
    "NewCouncilAdded(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "CollateralServiceProviderRevoked"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CouncilRevoked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewCollateralServiceProviderAdded"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCouncilAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type CollateralServiceProviderRevokedEvent = TypedEvent<
  [string],
  { account: string }
>;

export type CollateralServiceProviderRevokedEventFilter =
  TypedEventFilter<CollateralServiceProviderRevokedEvent>;

export type CouncilRevokedEvent = TypedEvent<[string], { account: string }>;

export type CouncilRevokedEventFilter = TypedEventFilter<CouncilRevokedEvent>;

export type NewCollateralServiceProviderAddedEvent = TypedEvent<
  [string],
  { account: string }
>;

export type NewCollateralServiceProviderAddedEventFilter =
  TypedEventFilter<NewCollateralServiceProviderAddedEvent>;

export type NewCouncilAddedEvent = TypedEvent<[string], { account: string }>;

export type NewCouncilAddedEventFilter = TypedEventFilter<NewCouncilAddedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Connector extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConnectorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addCollateralServiceProvider(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addCouncil(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isCollateralServiceProvider(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isCouncil(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    isMoneyPoolAdmin(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeCollateralServiceProvider(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeCouncil(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addCollateralServiceProvider(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addCouncil(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isCollateralServiceProvider(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isCouncil(account: string, overrides?: CallOverrides): Promise<boolean>;

  isMoneyPoolAdmin(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeCollateralServiceProvider(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeCouncil(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addCollateralServiceProvider(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addCouncil(account: string, overrides?: CallOverrides): Promise<void>;

    isCollateralServiceProvider(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isCouncil(account: string, overrides?: CallOverrides): Promise<boolean>;

    isMoneyPoolAdmin(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revokeCollateralServiceProvider(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeCouncil(account: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CollateralServiceProviderRevoked(address)"(
      account?: string | null
    ): CollateralServiceProviderRevokedEventFilter;
    CollateralServiceProviderRevoked(
      account?: string | null
    ): CollateralServiceProviderRevokedEventFilter;

    "CouncilRevoked(address)"(
      account?: string | null
    ): CouncilRevokedEventFilter;
    CouncilRevoked(account?: string | null): CouncilRevokedEventFilter;

    "NewCollateralServiceProviderAdded(address)"(
      account?: string | null
    ): NewCollateralServiceProviderAddedEventFilter;
    NewCollateralServiceProviderAdded(
      account?: string | null
    ): NewCollateralServiceProviderAddedEventFilter;

    "NewCouncilAdded(address)"(
      account?: string | null
    ): NewCouncilAddedEventFilter;
    NewCouncilAdded(account?: string | null): NewCouncilAddedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addCollateralServiceProvider(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addCouncil(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isCollateralServiceProvider(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCouncil(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    isMoneyPoolAdmin(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeCollateralServiceProvider(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeCouncil(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCollateralServiceProvider(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addCouncil(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isCollateralServiceProvider(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCouncil(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMoneyPoolAdmin(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeCollateralServiceProvider(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeCouncil(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
