/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type ReserveDataStruct = {
  moneyPoolFactor: BigNumberish;
  lTokenInterestIndex: BigNumberish;
  borrowAPY: BigNumberish;
  depositAPY: BigNumberish;
  lastUpdateTimestamp: BigNumberish;
  lTokenAddress: string;
  dTokenAddress: string;
  interestModelAddress: string;
  tokenizerAddress: string;
  id: BigNumberish;
  isPaused: boolean;
  isActivated: boolean;
};

export type ReserveDataStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string,
  string,
  string,
  number,
  boolean,
  boolean
] & {
  moneyPoolFactor: BigNumber;
  lTokenInterestIndex: BigNumber;
  borrowAPY: BigNumber;
  depositAPY: BigNumber;
  lastUpdateTimestamp: BigNumber;
  lTokenAddress: string;
  dTokenAddress: string;
  interestModelAddress: string;
  tokenizerAddress: string;
  id: number;
  isPaused: boolean;
  isActivated: boolean;
};

export interface IndexTestInterface extends utils.Interface {
  functions: {
    "getLTokenInterestIndex(address)": FunctionFragment;
    "getReserveData(address)": FunctionFragment;
    "updateState(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getLTokenInterestIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveData",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "updateState", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "getLTokenInterestIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateState",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IndexTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IndexTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getLTokenInterestIndex(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReserveData(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[ReserveDataStructOutput]>;

    updateState(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getLTokenInterestIndex(
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReserveData(
    asset: string,
    overrides?: CallOverrides
  ): Promise<ReserveDataStructOutput>;

  updateState(
    asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getLTokenInterestIndex(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveData(
      asset: string,
      overrides?: CallOverrides
    ): Promise<ReserveDataStructOutput>;

    updateState(asset: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getLTokenInterestIndex(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveData(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateState(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getLTokenInterestIndex(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveData(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateState(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
