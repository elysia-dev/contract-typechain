/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { MoneyPoolErrors } from "../MoneyPoolErrors";

export class MoneyPoolErrors__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MoneyPoolErrors> {
    return super.deploy(overrides || {}) as Promise<MoneyPoolErrors>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MoneyPoolErrors {
    return super.attach(address) as MoneyPoolErrors;
  }
  connect(signer: Signer): MoneyPoolErrors__factory {
    return super.connect(signer) as MoneyPoolErrors__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MoneyPoolErrors {
    return new Contract(address, _abi, signerOrProvider) as MoneyPoolErrors;
  }
}

const _abi = [
  {
    inputs: [],
    name: "DelinquentAssetBond",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
    ],
    name: "DigitalAssetAlreadyAdded",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "InvalidAmount",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "LTokenTransferNotAllowed",
    type: "error",
  },
  {
    inputs: [],
    name: "LoanExpired",
    type: "error",
  },
  {
    inputs: [],
    name: "MaxDigitalAssetCountExceeded",
    type: "error",
  },
  {
    inputs: [],
    name: "MaxReserveCountExceeded",
    type: "error",
  },
  {
    inputs: [],
    name: "NotDepositedAssetBond",
    type: "error",
  },
  {
    inputs: [],
    name: "NotEnoughLiquidityToLoan",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "availableLiquidity",
        type: "uint256",
      },
    ],
    name: "NotEnoughLiquidityToWithdraw",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "NotSettledAssetBond",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "NotSignedAssetBond",
    type: "error",
  },
  {
    inputs: [],
    name: "NotTimeForLoanStart",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyAssetBondOwnerBorrowAllowed",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyCollateralServiceProvider",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenState",
        type: "uint256",
      },
    ],
    name: "OnlyCollateralizedOrDelinquentAssetBondRepayable",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyCouncil",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyLToken",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyMoneyPoolAdmin",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenState",
        type: "uint256",
      },
    ],
    name: "OnlyNotPerformedAssetBondLiquidatable",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlySignedTokenBorrowAllowed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalRetrieveAmount",
        type: "uint256",
      },
    ],
    name: "PartialRepaymentNotAllowed",
    type: "error",
  },
  {
    inputs: [],
    name: "ReserveInactivated",
    type: "error",
  },
  {
    inputs: [],
    name: "ReservePaused",
    type: "error",
  },
  {
    inputs: [],
    name: "TimeOutForCollateralize",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "userLTokenBalance",
        type: "uint256",
      },
    ],
    name: "WithdrawInsufficientBalance",
    type: "error",
  },
];

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122096423f41c3c58001417b9626d9ca7cf30410e40b1f3afbc69fa5e0d4c6f6f10b64736f6c63430008040033";
